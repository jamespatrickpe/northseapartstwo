<%
   total_regular_work_hours = 0
   total_overtime_hours = 0
   total_night_shift_differential_hours = 0
   total_ot_nsd_hours = 0

   total_reg_aggregated_payment = 0
   total_ot_aggregated_payment = 0
   total_nsd_aggregated_payment = 0
   total_ot_nsd_aggregated_payment = 0

   total_for_selection = 0
%>

<% if (@selected_attendances.present?) %>
<div class="generic_content">
  <span class="table-label">Attendance - Payment Scheme</span>
  <table class="generic_table">
    <thead>
    <tr>
      <th colspan="3">Attendance</th>
      <th colspan="4">Number of Hours</th>
      <th colspan="4">Payment per Hour</th>
      <th colspan="4">Aggregated Payment</th>
    </tr>
    <tr>
      <th>Day</th>
      <th>Time In</th>
      <th>Time Out</th>
      <th>REG</th>
      <th>OT</th>
      <th>NSD</th>
      <th>OT NSD</th>
      <th>REG</th>
      <th>OT</th>
      <th>NSD</th>
      <th>OT NSD</th>
      <th>REG</th>
      <th>OT</th>
      <th>NSD</th>
      <th>OT NSD</th>
      <th>TOTAL</th>
      <th>Remark</th>
    </tr>
    </thead>
    <tbody>
    <%
       start_date = Date.parse(@start_date)
       end_date = Date.parse(@end_date)
       (start_date..end_date).each do |date_aspect|
    %>
        <!-- INITIALIZE VARIABLES -->
        <%
           attendance_time_in = 0
           attendance_time_out = 0
           regular_work_hours = 0
           overtime_hours = 0
           night_shift_differential_hours = 0
           ot_nsd_hours = 0
           reg = 0
           ot = 0
           nsd = 0
           ot_nsd = 0
           reg_aggregated_payment = 0
           ot_aggregated_payment = 0
           nsd_aggregated_payment = 0
           ot_nsd_aggregated_payment = 0
           total_aggregated_payment = 0

           attendance_exists_token = false
           current_attendance_date_time = date_aspect.strftime('%Y-%m-%d')
           rest_day_token = display_if_rest_day(@selected_employee.id,date_aspect.strftime('%A'),current_attendance_date_time )
           remark = ''
           link_token = ''
           attendance_id = ''
        %>

        <!-- SCAN FOR ATTENDANCE ON DAY -->
        <% @selected_attendances.each do |selected_attendance| %>
            <% if selected_attendance[:date_of_attendance] == date_aspect %>
                <%
                   attendance_exists_token = true
                   link_token = true

                   attendance_time_in = selected_attendance[:timein].strftime("%T")
                   attendance_time_out = selected_attendance[:timeout].strftime("%T")

                   regular_work_hours = categorize_work_hours( attendance_time_in, attendance_time_out, current_attendance_date_time)[:regular_work_hours]
                   overtime_hours = categorize_work_hours( attendance_time_in, attendance_time_out, current_attendance_date_time)[:overtime]
                   night_shift_differential_hours = categorize_work_hours( attendance_time_in, attendance_time_out, current_attendance_date_time)[:night_shift_differential_hours]
                   ot_nsd_hours = categorize_work_hours( attendance_time_in, attendance_time_out, current_attendance_date_time)[:ot_nsd]

                   reg = base_rates(@selected_employee.id, current_attendance_date_time,rest_day_token)[:reg]
                   ot = base_rates(@selected_employee.id, current_attendance_date_time,rest_day_token)[:ot]
                   nsd = base_rates(@selected_employee.id, current_attendance_date_time,rest_day_token)[:nsd]
                   ot_nsd = base_rates(@selected_employee.id, current_attendance_date_time,rest_day_token)[:ot_nsd]

                   reg_aggregated_payment = (regular_work_hours*reg)
                   ot_aggregated_payment = (overtime_hours*ot)
                   nsd_aggregated_payment = (night_shift_differential_hours*nsd)
                   ot_nsd_aggregated_payment = (ot_nsd_hours*ot_nsd)

                   remark = selected_attendance[:remark]
                   attendance_id = selected_attendance[:id]
                   total_aggregated_payment = reg_aggregated_payment + ot_aggregated_payment + nsd_aggregated_payment + ot_nsd_aggregated_payment
                %>
            <% end %>
        <% end %>

        <!-- NO ATTENDANCE FOUND ON DAY -->
        <%
           if attendance_exists_token == false
             if special_non_working_holiday(date_aspect)
               reg = base_rates(@selected_employee.id, current_attendance_date_time,rest_day_token)[:reg]
               reg_aggregated_payment = (8*reg)
             end
           end
        %>

        <!-- PRESENTATION -->
        <tr>
          <td>
            <%= date_aspect %> <br>
            <%= display_if_holiday(date_aspect) %>
            <%= rest_day_token %>
          </td>
          <td> <%= attendance_time_in %> </td>
          <td> <%= attendance_time_out %> </td>
          <td> <%= regular_work_hours.round(2) %> </td>
          <td> <%= overtime_hours.round(2) %> </td>
          <td> <%= night_shift_differential_hours.round(2) %> </td>
          <td> <%= ot_nsd_hours.round(2) %> </td>
          <td> <%= reg.round(2) %> </td>
          <td> <%= ot.round(2) %> </td>
          <td> <%= nsd.round(2) %> </td>
          <td> <%= ot_nsd.round(2) %> </td>
          <td> <%= reg_aggregated_payment.round(2) %> </td>
          <td> <%= ot_aggregated_payment.round(2) %> </td>
          <td> <%= nsd_aggregated_payment.round(2) %> </td>
          <td> <%= ot_nsd_aggregated_payment.round(2) %> </td>
          <td> <%= total_aggregated_payment.round(2) %> </td>
          <td> <%= remark %> </td>
          <td class="actions">
            <%=
                if link_token == true
                  generic_payroll_examine_link('/human_resources/attendance_performance/attendances/', attendance_id)
                end
            %>
          </td>
        </tr>

        <!-- ADDING ITERATION -->
        <%
           total_regular_work_hours = total_regular_work_hours + regular_work_hours
           total_overtime_hours = total_overtime_hours + overtime_hours
           total_night_shift_differential_hours = total_night_shift_differential_hours + night_shift_differential_hours
           total_ot_nsd_hours = total_ot_nsd_hours + ot_nsd_hours

           total_reg_aggregated_payment = total_reg_aggregated_payment + reg_aggregated_payment
           total_ot_aggregated_payment = total_ot_aggregated_payment + ot_aggregated_payment
           total_nsd_aggregated_payment = total_nsd_aggregated_payment + nsd_aggregated_payment
           total_ot_nsd_aggregated_payment = total_ot_nsd_aggregated_payment + ot_nsd_aggregated_payment

           total_for_selection = total_for_selection + total_aggregated_payment
        %>
    <% end %>

    <tr>
      <td></td>
      <td></td>
      <td></td>
      <td><%= total_regular_work_hours.round(2) %></td>
      <td><%= total_overtime_hours.round(2) %></td>
      <td><%= total_night_shift_differential_hours.round(2) %></td>
      <td><%= total_ot_nsd_hours.round(2) %></td>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
      <td><%= total_reg_aggregated_payment.round(2) %></td>
      <td><%= total_ot_aggregated_payment.round(2) %></td>
      <td><%= total_nsd_aggregated_payment.round(2) %></td>
      <td><%= total_ot_nsd_aggregated_payment.round(2) %></td>
      <td class="subtotal"><%= total_for_selection.round(2) %></td>
      <td></td>
      <td></td>
    </tr>
    </tbody>
  </table>
</div>
<% end %>